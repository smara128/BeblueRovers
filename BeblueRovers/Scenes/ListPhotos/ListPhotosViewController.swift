//
//  ListPhotosViewController.swift
//  BeblueRovers
//
//  Created by Silvia Florido on 24/02/19.
//  Copyright (c) 2019 Silvia Florido. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPhotosDisplayLogic: class
{
    func displayPhotos(viewModel: ListPhotos.FetchPhotos.ViewModel)
}

class ListPhotosViewController: UIViewController, UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout, ListPhotosDisplayLogic
{
    @IBOutlet weak var collectionView: UICollectionView!
      var interactor: ListPhotosBusinessLogic?
    //  var router: (NSObjectProtocol & ListPhotosRoutingLogic & ListPhotosDataPassing)?
    
    var displayedPhotos: [ListPhotos.FetchPhotos.ViewModel.DisplayedPhoto] = []
    var selectedRover: MarsRovers
    
    
    // MARK: Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        selectedRover = MarsRovers.Curiosity
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        selectedRover = MarsRovers.Curiosity
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: View lifecycle
    override func viewDidLoad()
    {
        super.viewDidLoad()
        fetchPhotos()
    }
    
    // MARK: Setup
    private func setup()
    {
        let viewController = self
        let interactor = ListPhotosInteractor()
        let presenter = ListPhotosPresenter()
        //    let router = ListPhotosRouter()
        viewController.interactor = interactor
        //    viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        //    router.viewController = viewController
        //    router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            //      if let router = router, router.responds(to: selector) {
            //        router.perform(selector, with: segue)
            //      }
        }
    }
    
    
    // MARK: Photos
    func fetchPhotos()
    {
        let request = ListPhotos.FetchPhotos.Request(rover: selectedRover.rawValue)
        interactor?.fetchPhotos(request: request)
    }
    
    
    func displayPhotos(viewModel: ListPhotos.FetchPhotos.ViewModel)
    {
        displayedPhotos = viewModel.displayedPhotos
        collectionView.reloadData()
    }
    
    //  MARK: Actions
    @IBAction func roversSegmentTapped(_ sender: UISegmentedControl) {
        let index = sender.selectedSegmentIndex
        
        switch index {
        case 0:
            selectedRover = MarsRovers.Curiosity
        case 1:
            selectedRover = MarsRovers.Opportunity
        case 2:
            selectedRover = MarsRovers.Spirit
        default:
            selectedRover = MarsRovers.Curiosity
        }
        fetchPhotos()
    }
    
    
    
    
    //  MARK: UICollectionViewDataSource
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return 10//displayedPhotos.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        //        let displayedPhoto = displayedPhotos[indexPath.row]
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "PhotoCollectionCell", for: indexPath) as! PhotoCollectionViewCell
        
        //        cell.photoImageView.image = displayedPhoto.img_src
        
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let cellWidth = (view.frame.size.width - 30) / 2
        let cellHeight = (cellWidth * 4) / 3
        return  CGSize(width: cellWidth, height: cellHeight)
    }
    
    
    
}
