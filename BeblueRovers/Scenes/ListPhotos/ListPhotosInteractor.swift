//
//  ListPhotosInteractor.swift
//  BeblueRovers
//
//  Created by Silvia Florido on 24/02/19.
//  Copyright (c) 2019 Silvia Florido. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPhotosBusinessLogic
{
    func fetchPhotos(request: ListPhotos.FetchPhotos.Request)
}

protocol ListPhotosDataStore
{
}

class ListPhotosInteractor: ListPhotosBusinessLogic, ListPhotosDataStore
{
   
    var presenter: ListPhotosPresentationLogic?
      var worker: PhotosWorker?
    
    
    // MARK: Fetch Photos
    func fetchPhotos(request: ListPhotos.FetchPhotos.Request) {
        worker = PhotosWorker(photosStore: PhotosAPI.sharedInstance())
        worker?.fetchPhotos(rover: request.rover, completionHandler: { (photos, error) in
            print(photos as Any)
            if let photos = photos {
                for photo in photos {
                    var photo = photo
                    let request = ListPhotos.FetchImage.Request(urlStr:photo.imageSource)
                    self.fetchImage(request: request, completionHandler: { (imageData, photoStoreError) in
                        if let imageData = imageData {
                            photo.imageData = imageData
                        }
                    })
                }
                
                let response = ListPhotos.FetchPhotos.Response(photos: photos)
                self.presenter?.presentPhotos(response: response)
            } else {
                self.presenter?.presentFetchError()
            }
            
        })
    }
    
    func fetchImage(request: ListPhotos.FetchImage.Request, completionHandler: @escaping (Data?, PhotosStoreError?) -> Void) {
        worker = PhotosWorker(photosStore: PhotosAPI.sharedInstance())
        worker?.fetchImage(request.urlStr, completionHandlerForImage: { (image, photoStoreError) in
            if let image = image {
                    completionHandler(image, nil)
            } else {
                completionHandler(nil, photoStoreError)
            }
        })
        
    }
    
    
}
