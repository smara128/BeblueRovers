//
//  ListPhotosInteractor.swift
//  BeblueRovers
//
//  Created by Silvia Florido on 24/02/19.
//  Copyright (c) 2019 Silvia Florido. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPhotosBusinessLogic
{
    func fetchPhotos(request: ListPhotos.FetchPhotos.Request)
    func fetchImage(request: ListPhotos.FetchImage.Request)
}

protocol ListPhotosDataStore
{
}

class ListPhotosInteractor: ListPhotosBusinessLogic, ListPhotosDataStore
{
    
    var presenter: ListPhotosPresentationLogic?
    var worker: PhotosWorker?
    var photos: [Photo] = []
    
    
    // MARK: Fetch Photos
    func fetchPhotos(request: ListPhotos.FetchPhotos.Request) {
        worker = PhotosWorker(photosStore: PhotosAPI.sharedInstance())
        worker?.fetchPhotos(rover: request.rover, completionHandler: { (photos, error) in
            print(photos as Any)
            if let photos = photos {
                self.photos = photos
                let response = ListPhotos.FetchPhotos.Response(photos: photos)
                self.presenter?.presentPhotos(response: response)
            } else {
                self.presenter?.presentFetchError()
            }
        })
    }
    
    func fetchImage(request: ListPhotos.FetchImage.Request) {
        var photo = photoWith(photoId: request.photoId)
        
        worker = PhotosWorker(photosStore: PhotosAPI.sharedInstance())
        worker?.fetchImage(request.urlStr, completionHandlerForImage: { (image, photoStoreError) in
            if let image = image {
                photo?.imageData = image
                let response = ListPhotos.FetchImage.Response(indexPath: request.indexPath, photoId: request.photoId, imageData: image)
                self.presenter?.presentImage(response: response)
            } else {
            }
        })
        
    }
    
    
    func photoWith(photoId :Int) -> Photo? {
        return photos.filter{ $0.id == photoId}.first
    }
    
}
