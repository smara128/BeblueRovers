//
//  PhotosWorker.swift
//  BeblueRovers
//
//  Created by Silvia Florido on 24/02/19.
//  Copyright (c) 2019 Silvia Florido. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
protocol PhotosStoreProtocol
{
    func fetchPhotos(completionHandler: @escaping ([Photo]?, PhotosStoreError?) -> Void)
}

class PhotosWorker
{
    var photosStore: PhotosStoreProtocol
    
    init(photosStore: PhotosStoreProtocol) {
        self.photosStore = photosStore
    }
    
    func fetchPhotos(completionHandler: @escaping ([Photo]?, PhotosStoreError?) -> Void)
    {
        photosStore.fetchPhotos { (photos, photosStoreError) in
            if let photos = photos {
                // convert data to photos
                DispatchQueue.main.async {
                    completionHandler(photos, nil)
                }
            } else {
                DispatchQueue.main.async {
                    completionHandler(nil, photosStoreError)
                }
            }
        }
    }
    
}



// MARK: - store operation errors

enum PhotosStoreError: Equatable, Error
{
    case CannotFetch(String)
    case CannotCreate(String)
    case CannotUpdate(String)
    case CannotDelete(String)
}

func ==(lhs: PhotosStoreError, rhs: PhotosStoreError) -> Bool
{
    switch (lhs, rhs) {
    case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
    case (.CannotCreate(let a), .CannotCreate(let b)) where a == b: return true
    case (.CannotUpdate(let a), .CannotUpdate(let b)) where a == b: return true
    case (.CannotDelete(let a), .CannotDelete(let b)) where a == b: return true
    default: return false
    }
}
